/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "#graphql\n  query GetMedia($uri: String!, $origin: String, $id: String) {\n    Media(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      popularity\n      shortDescription\n      description\n      coverImage {\n        color\n        default\n      }\n      bannerImage\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            title {\n              romanized\n              english\n              native\n            }\n            trailers {\n              handler\n              origin\n              id\n              uri\n              url\n              thumbnail\n            }\n            popularity\n            shortDescription\n            description\n            handles {\n              edges {\n                node {\n                  handler\n                  origin\n                  id\n                  uri\n                  url\n                }\n              }\n            }\n            episodes {\n              edges {\n                node {\n                  airingAt\n                  number\n                  uri\n                  media {\n                    handler\n                    origin\n                    id\n                    uri\n                    url\n                  }\n                  mediaUri\n                  timeUntilAiring\n                  thumbnail\n                  title {\n                    romanized\n                    english\n                    native\n                  }\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n      trailers {\n        handler\n        origin\n        id\n        uri\n        url\n        thumbnail\n      }\n      episodes {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            airingAt\n            number\n            media {\n              handler\n              origin\n              id\n              uri\n              url\n            }\n            mediaUri\n            timeUntilAiring\n            thumbnail\n            title {\n              romanized\n              english\n              native\n            }\n            description\n          }\n        }\n      }\n    }\n  }\n": types.GetMediaDocument,
    "\n  query GetOrigins($ids: [String!]) {\n    Page {\n      origin(ids: $ids) {\n        id\n        name\n        official\n        metadataOnly\n      }\n    }\n  }\n": types.GetOriginsDocument,
    "#graphql\n  query GET_CURRENT_SEASON($season: MediaSeason!, $seasonYear: Int! $sort: [MediaSort]!) {\n    Page {\n      media(season: $season, seasonYear: $seasonYear, sort: $sort) {\n        handler\n        origin\n        id\n        uri\n        url\n        title {\n          romanized\n          english\n          native\n        }\n        popularity\n        shortDescription\n        description\n        coverImage {\n          color\n          default\n        }\n        bannerImage\n        handles {\n          edges {\n            node {\n              handler\n              origin\n              id\n              uri\n              url\n              title {\n                romanized\n                english\n                native\n              }\n              popularity\n              shortDescription\n              description\n            }\n          }\n        }\n        trailers {\n          handler\n          origin\n          id\n          uri\n          url\n          thumbnail\n        }\n      }\n    }\n  }\n": types.Get_Current_SeasonDocument,
    "\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n": types.GetMediaEpisodeDocument,
    "#graphql\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n": types.GetMediaEpisodeDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "#graphql\n  query GetMedia($uri: String!, $origin: String, $id: String) {\n    Media(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      popularity\n      shortDescription\n      description\n      coverImage {\n        color\n        default\n      }\n      bannerImage\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            title {\n              romanized\n              english\n              native\n            }\n            trailers {\n              handler\n              origin\n              id\n              uri\n              url\n              thumbnail\n            }\n            popularity\n            shortDescription\n            description\n            handles {\n              edges {\n                node {\n                  handler\n                  origin\n                  id\n                  uri\n                  url\n                }\n              }\n            }\n            episodes {\n              edges {\n                node {\n                  airingAt\n                  number\n                  uri\n                  media {\n                    handler\n                    origin\n                    id\n                    uri\n                    url\n                  }\n                  mediaUri\n                  timeUntilAiring\n                  thumbnail\n                  title {\n                    romanized\n                    english\n                    native\n                  }\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n      trailers {\n        handler\n        origin\n        id\n        uri\n        url\n        thumbnail\n      }\n      episodes {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            airingAt\n            number\n            media {\n              handler\n              origin\n              id\n              uri\n              url\n            }\n            mediaUri\n            timeUntilAiring\n            thumbnail\n            title {\n              romanized\n              english\n              native\n            }\n            description\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["#graphql\n  query GetMedia($uri: String!, $origin: String, $id: String) {\n    Media(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      popularity\n      shortDescription\n      description\n      coverImage {\n        color\n        default\n      }\n      bannerImage\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            title {\n              romanized\n              english\n              native\n            }\n            trailers {\n              handler\n              origin\n              id\n              uri\n              url\n              thumbnail\n            }\n            popularity\n            shortDescription\n            description\n            handles {\n              edges {\n                node {\n                  handler\n                  origin\n                  id\n                  uri\n                  url\n                }\n              }\n            }\n            episodes {\n              edges {\n                node {\n                  airingAt\n                  number\n                  uri\n                  media {\n                    handler\n                    origin\n                    id\n                    uri\n                    url\n                  }\n                  mediaUri\n                  timeUntilAiring\n                  thumbnail\n                  title {\n                    romanized\n                    english\n                    native\n                  }\n                  description\n                }\n              }\n            }\n          }\n        }\n      }\n      trailers {\n        handler\n        origin\n        id\n        uri\n        url\n        thumbnail\n      }\n      episodes {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n            url\n            airingAt\n            number\n            media {\n              handler\n              origin\n              id\n              uri\n              url\n            }\n            mediaUri\n            timeUntilAiring\n            thumbnail\n            title {\n              romanized\n              english\n              native\n            }\n            description\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetOrigins($ids: [String!]) {\n    Page {\n      origin(ids: $ids) {\n        id\n        name\n        official\n        metadataOnly\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetOrigins($ids: [String!]) {\n    Page {\n      origin(ids: $ids) {\n        id\n        name\n        official\n        metadataOnly\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "#graphql\n  query GET_CURRENT_SEASON($season: MediaSeason!, $seasonYear: Int! $sort: [MediaSort]!) {\n    Page {\n      media(season: $season, seasonYear: $seasonYear, sort: $sort) {\n        handler\n        origin\n        id\n        uri\n        url\n        title {\n          romanized\n          english\n          native\n        }\n        popularity\n        shortDescription\n        description\n        coverImage {\n          color\n          default\n        }\n        bannerImage\n        handles {\n          edges {\n            node {\n              handler\n              origin\n              id\n              uri\n              url\n              title {\n                romanized\n                english\n                native\n              }\n              popularity\n              shortDescription\n              description\n            }\n          }\n        }\n        trailers {\n          handler\n          origin\n          id\n          uri\n          url\n          thumbnail\n        }\n      }\n    }\n  }\n"): (typeof documents)["#graphql\n  query GET_CURRENT_SEASON($season: MediaSeason!, $seasonYear: Int! $sort: [MediaSort]!) {\n    Page {\n      media(season: $season, seasonYear: $seasonYear, sort: $sort) {\n        handler\n        origin\n        id\n        uri\n        url\n        title {\n          romanized\n          english\n          native\n        }\n        popularity\n        shortDescription\n        description\n        coverImage {\n          color\n          default\n        }\n        bannerImage\n        handles {\n          edges {\n            node {\n              handler\n              origin\n              id\n              uri\n              url\n              title {\n                romanized\n                english\n                native\n              }\n              popularity\n              shortDescription\n              description\n            }\n          }\n        }\n        trailers {\n          handler\n          origin\n          id\n          uri\n          url\n          thumbnail\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "#graphql\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n"): (typeof documents)["#graphql\n  query GetMediaEpisode($uri: String!, $origin: String, $id: String) {\n    Episode(uri: $uri, origin: $origin, id: $id) {\n      handler\n      origin\n      id\n      uri\n      url\n      title {\n        romanized\n        english\n        native\n      }\n      description\n      handles {\n        edges {\n          node {\n            handler\n            origin\n            id\n            uri\n          }\n        }\n      }\n      playback {\n        type\n        url\n        uri\n        origin\n        data\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;